<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<!--
Program D Core Configuration
===============================================================
This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 
02111-1307, USA.
-->

<!--
GENERAL NOTES

1. Configuration options are grouped for easy maintenance.
2. Unless otherwise noted, commenting out a property will
   cause the engine's default value to be used.
3. A property may only be defined once.
4. The notations in [square brackets] are used to generate
   the Settings class that corresponds with this properties
   file.  Please do not change these notations unless you
   know what you are doing.
-->

<properties version="1.0">
    <!--[generate: org.aitools.programd.CoreSettings]
        [strip-prefix: programd.]-->
        
    <!--
    MAIN PROGRAM D CONFIGURATION
    -->
    
    <!--The root directory for all paths. [String: ..]
         * This is generally relative to the current directory
         * (i.e., the conf directory), although you can change
         * that in your startup script.-->
    <entry key="programd.root-directory">.</entry>
    
    <!--The namespace URI of AIML to use. [String: http://alicebot.org/2001/AIML-1.0.1]-->
    <entry key="programd.aiml-schema.namespace-uri">http://alicebot.org/2001/AIML-1.0.1</entry>
    
    <!--The location of the AIML schema (or a copy of it). [String: resources/schema/AIML.xsd]-->
    <entry key="programd.aiml-schema.location">./schema/AIML.xsd</entry>
    
    <!--The bot configuration startup file. [String: conf/bots.xml]--> 
    <entry key="programd.startup-file-path">bots.xml</entry>
    
    <!--What to do when a category is loaded whose pattern:that:topic path
        is identical to one already loaded (for the same bot).
        * skip: Leave the currently loaded template in place and ignore the new one.
        * overwrite: Overwrite the loaded template with the new one.
        * append: Append the content of the new template to the currently loaded one.
        * combine: Store the new template as well, so it will have an equal chance
                   of being used as the currently loaded one.
                                 [enum(skip, overwrite, append, combine): combine]-->
    <entry key="programd.merge.policy">combine</entry>
    
    <!--If the append merge policy is used, what text content (if any)
        should be inserted between the contents of the two templates?
        * (The default value you see here is the hex code for a space.)  [String: &#x10;]-->
    <entry key="programd.merge.append.separator-string"> </entry>
    
    <!--Produce a note in the console/log for each merge? [boolean: true]-->
    <entry key="programd.merge.note-each">false</entry>
    
    <!--The default value for undefined predicates. [String: undefined]-->
    <entry key="programd.predicate-empty-default">undefined</entry>
    
    <!--The maximum allowable time (in milliseconds) to get a response. [int: 1000]-->
    <entry key="programd.response-timeout">1000</entry>
    
    <!-- How many categories will be loaded before a message is displayed? [int: 5000]
         * Only meaningful if programd.enable-console == true.-->
    <entry key="programd.category-load-notify-interval">5000</entry>
    
    <!--The input to match if an infinite loop is found. [String: INFINITE LOOP]-->
    <entry key="programd.infinite-loop-input">INFINITE LOOP</entry>
    
    <!-- Which bot predicate contains the client's name? [String: name]-->
    <entry key="programd.client-name-predicate">name</entry>
    
    <!-- Which bot predicate contains the bot's name? [String: name]-->
    <entry key="programd.bot-name-predicate">name</entry>
    
    <!-- Log/display match trace messages? [boolean: true]-->
    <entry key="programd.record-match-trace">true</entry>
    
    <!-- Print stack trace on uncaught exceptions? [boolean: false]-->
    <entry key="programd.on-uncaught-exceptions.print-stack-trace">false</entry>
    
    <!--Allow use of <system> element? [boolean: false]-->
    <entry key="programd.os-access-allowed">false</entry>
    
    <!--Allow use of <javascript> element? [boolean: false]-->
    <entry key="programd.javascript-allowed">false</entry>
    
    <!--Where to write gossip entries.                       [String: logs/gossip.txt]
        * Gossip entries will be written like this:
          <li>the gossip</li>.-->
    <entry key="programd.gossip.path">./logs/gossip.txt</entry>
    
    <!--The string to send when first connecting to the bot. [String: CONNECT]
         * If this value is empty or not defined, no value
           will be sent.-->
    <entry key="programd.connect-string">CONNECT</entry>
    
    <!--The string to send after an inactivity timeout. [String: INACTIVITY]-->
    <entry key="programd.inactivity-string">INACTIVITY</entry>
    
    <!--The Multiplexor to use. [String: org.aitools.programd.multiplexor.FlatFileMultiplexor]-->
    <entry key="programd.multiplexor-classname">org.aitools.programd.multiplexor.FlatFileMultiplexor</entry>
    <!--<entry key="programd.multiplexor-classname">org.aitools.programd.multiplexor.DBMultiplexor</entry>-->
    
    <!--The subdirectory in which to save flat-file predicates (FFM only). [String: ffm]-->
    <entry key="programd.multiplexor.ffm-dir">./ffm</entry>
    
    <!--Enable the heart? [boolean: false]
        * The heart can beat and let you know the bot is alive.
        * Right now the only kind of pulse is a message "I'm alive!" printed to the console.
        * You can write a "Pulse" that can do something more useful, like ping a server.-->
    <entry key="programd.heart.enabled">false</entry>
    
    <!--The pulse rate for the heart (beats per minute). [int: 5]-->
    <entry key="programd.heart.pulserate">5</entry>
    
    <!--The maximum size of the cache before writing to disk/database. [int: 500]-->
    <entry key="programd.predicate-cache.max">500</entry>
    
        
    <!--
    INTERPRETER CONFIGURATION
    -->
    
    <!--The directory in which to execute <system> commands. [String: .]-->
    <entry key="programd.system-interpreter.directory"></entry>
    
    <!--The string to prepend to all <system> calls (platform-specific). [String: ]
         * Windows requires something like "cmd /c "; Linux doesn't (just comment out)-->
    <entry key="programd.system-interpreter.prefix"></entry>
    
    <!--The JavaScript interpreter (fully-qualified class name). [String: org.aitools.programd.interpreter.RhinoInterpreter]-->
    <entry key="programd.javascript-interpreter.classname">org.aitools.programd.interpreter.RhinoInterpreter</entry>
    
    
    <!--
    AIMLWATCHER CONFIGURATION
    -->
    
    <!--Enable the AIML Watcher? [boolean: false]
        * This will automatically load your AIML files if they are changed.-->
    <entry key="programd.use-watcher">true</entry>
    
    <!--The delay period when checking changed AIML (milliseconds). [int: 2000]
        * Only applicable if the AIML Watcher is enabled.-->
    <entry key="programd.watcher.timer">2000</entry>
    
    
    <!--
    LOGGING CONFIGURATION
    For pattern syntax, see http://java.sun.com/j2se/1.5.0/docs/api/java/util/logging/FileHandler.html
    -->
    
    <!--The general activity log file. [String: logs/activity-%g.log]-->
    <entry key="programd.activity.log.pattern">./res/activity.log</entry>

    <!--The log file for matching activity. [String: logs/matching-%g.log]-->
    <entry key="programd.matching.log.pattern">./res/matching.log</entry>
    
    <!--The date-time format to use in general logs. [String: yyyy-MM-dd H:mm:ss]
        * See http://java.sun.com/jdk1.5.0/docs/api/java/text/SimpleDateFormat.html
          for formatting codes.
        * Setting the value to blank means no timestamp will be displayed.-->
    <entry key="programd.log.timestamp-format">yyyy-MM-dd H:mm:ss</entry>

    <!--The subdirectory for chat logs. [String: logs/chat]-->
    <entry key="programd.chat.log.directory">./res/chat</entry>

    <!--The date-time format to use in chat logs. [String: yyyy-MM-dd H:mm:ss]
        * See http://java.sun.com/jdk1.5.0/docs/api/java/text/SimpleDateFormat.html
          for formatting codes.
        * Setting the value to blank means no timestamp will be displayed.-->
    <entry key="programd.chat.log.timestamp-format"></entry>

    <!--Enable chat logging to plain text files? [boolean: true]-->
    <entry key="programd.chat.log.to-plain-text">true</entry>
    
    <!--Enable chat logging to XML? [boolean: true]-->
    <entry key="programd.chat.log.to-xml">false</entry>
    
    <!--
    Database logging
    -->
    
    <!--Enable chat logging to the database? [boolean: false]
        * Be sure that the database configuration (later in this file) is valid.-->
    <entry key="programd.chat.log.to-database">false</entry>
    
    
    <!--
    DATABASE CONFIGURATION
         * This is only meaningful if you are using a database-enabled Multiplexor
         * and/or the database-based chat logging.
    -->
    
    <!--Typical mySQL configuration-->
    
    <!--The URL of the database to use. [String: jdbc:mysql:///programdbot]-->
    <entry key="programd.database.url">jdbc:mysql:///programdbot</entry>
    
    <!--The database driver to use. [String: org.gjt.mm.mysql.Driver]-->
    <entry key="programd.database.driver">org.gjt.mm.mysql.Driver</entry>
    
    
    <!--The maximum number of simultaneous connections to the database. [int: 25]-->
    <entry key="programd.database.connections">25</entry>
    
    <!--The username which with to access the database. [String: programd]-->
    <entry key="programd.database.user">programd</entry>
    
    <!--The password for the database. [String: yourpassword]-->
    <entry key="programd.database.password">yourpassword</entry>
    
    
    <!--
    OTHER CONFIGURATION FILE LOCATIONS
    -->
    
    <!--Configuration file for plugins. [String: conf/plugins.xml]-->
    <entry key="programd.conf-location.plugins">plugins.xml</entry>

    <!--Configuration file for HTMLResponder. [String: conf/html-responder.xml]-->
    <entry key="programd.conf-location.html-responder">html-responder.xml</entry>

    <!--Configuration file for FlashResponder. [String: conf/flash-responder.xml]-->
    <entry key="programd.conf-location.flash-responder">flash-responder.xml</entry>
    
</properties>